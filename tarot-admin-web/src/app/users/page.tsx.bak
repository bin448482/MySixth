'use client';

import React, { useState, useEffect } from 'react';
import {
  Card,
  Table,
  Button,
  Input,
  Select,
  Space,
  Tag,
  Modal,
  Form,
  InputNumber,
  message,
  Popconfirm,
  Typography,
  Row,
  Col,
  Statistic,
  DatePicker,
  Tooltip,
  Descriptions,
} from 'antd';
import {
  UserOutlined,
  SearchOutlined,
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  ExportOutlined,
  ReloadOutlined,
  EyeOutlined,
  MailOutlined,
  CheckCircleOutlined,
  CloseCircleOutlined,
  CopyOutlined,
} from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';
import AdminLayout from '@/components/layout/AdminLayout';
import { usersApi, authApi } from '@/lib/api';
import type { User, UserFilters, AdjustCreditsRequest } from '@/types';

const { Search } = Input;
const { Option } = Select;
const { Title, Text } = Typography;
const { RangePicker } = DatePicker;

export default function UsersPage() {
  const [loading, setLoading] = useState(false);
  const [users, setUsers] = useState<User[]>([]);
  const [total, setTotal] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(20);

  // 绛涢€夋潯浠?
  const [filters, setFilters] = useState<UserFilters>({
    page: 1,
    size: 20,
  });

  // 妯℃€佹鐘舵€?
  const [userDetailVisible, setUserDetailVisible] = useState(false);
  const [adjustCreditsVisible, setAdjustCreditsVisible] = useState(false);
  const [emailVerificationVisible, setEmailVerificationVisible] = useState(false);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);

  // 琛ㄥ崟瀹炰緥
  const [adjustForm] = Form.useForm();
  const [emailForm] = Form.useForm();

  // 鍔犺浇鐢ㄦ埛鍒楄〃
  const loadUsers = async () => {
    setLoading(true);
    try {
      const response = await usersApi.getUsers({
        ...filters,
        page: currentPage,
        size: pageSize,
      });
      setUsers(response.users);
      setTotal(response.total);
    } catch (error) {
      message.error('鍔犺浇鐢ㄦ埛鍒楄〃澶辫触');
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadUsers();
  }, [currentPage, pageSize, filters]);

  // 鏌ョ湅鐢ㄦ埛璇︽儏
  const handleViewUser = async (user: User) => {
    try {
      const response = await usersApi.getUserDetail(user.installation_id);
      setSelectedUser(response.user);
      setUserDetailVisible(true);
    } catch (error) {
      message.error('鑾峰彇鐢ㄦ埛璇︽儏澶辫触');
    }
  };

  // 璋冩暣绉垎
  const handleAdjustCredits = (user: User) => {
    setSelectedUser(user);
    adjustForm.resetFields();
    setAdjustCreditsVisible(true);
  };

  // 鎻愪氦绉垎璋冩暣
  const handleAdjustSubmit = async (values: Omit<AdjustCreditsRequest, 'installation_id'>) => {
    if (!selectedUser) return;

    try {
      await usersApi.adjustCredits({
        installation_id: selectedUser.installation_id,
        credits: values.credits,
        reason: values.reason,
      });
      message.success('绉垎璋冩暣鎴愬姛');
      setAdjustCreditsVisible(false);
      loadUsers(); // 閲嶆柊鍔犺浇鍒楄〃
    } catch (error) {
      message.error('绉垎璋冩暣澶辫触');
    }
  };

  // 鍒犻櫎鐢ㄦ埛
  const handleDeleteUser = async (user: User) => {
    try {
      await usersApi.deleteUser(user.installation_id);
      message.success('鐢ㄦ埛鍒犻櫎鎴愬姛');
      loadUsers();
    } catch (error) {
      message.error('鐢ㄦ埛鍒犻櫎澶辫触');
    }
  };

  // 瀵煎嚭鐢ㄦ埛鏁版嵁
  const handleExport = async () => {
    try {
      const blob = await usersApi.exportUsers(filters);
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `users_export_${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
      message.success('瀵煎嚭鎴愬姛');
    } catch (error) {
      message.error('瀵煎嚭澶辫触');
    }
  };

  // 澶嶅埗鐢ㄦ埛ID
  const handleCopyId = (id: string) => {
    navigator.clipboard.writeText(id);
    message.success('鐢ㄦ埛ID宸插鍒?);
  };

  // 鍙戦€侀偖绠遍獙璇侀偖浠?
  const handleEmailVerification = (user: User) => {
    setSelectedUser(user);
    emailForm.resetFields();
    setEmailVerificationVisible(true);
  };

  // 鎻愪氦閭楠岃瘉
  const handleEmailVerificationSubmit = async (values: { email: string }) => {
    if (!selectedUser) return;

    try {
      await authApi.sendVerificationEmail(selectedUser.installation_id, values.email);
      message.success('楠岃瘉閭欢宸插彂閫?);
      setEmailVerificationVisible(false);
      loadUsers(); // 閲嶆柊鍔犺浇鍒楄〃
    } catch (error) {
      message.error('鍙戦€侀獙璇侀偖浠跺け璐?);
    }
  };

  // 琛ㄦ牸鍒楅厤缃?
  const columns: ColumnsType<User> = [
    {
      title: '鐢ㄦ埛ID',
      dataIndex: 'installation_id',
      key: 'installation_id',
      width: 200,
      render: (id: string) => (
        <Space>
          <Text code style={{ fontSize: 12 }}>
            {id.substring(0, 12)}...
          </Text>
          <Tooltip title="澶嶅埗瀹屾暣ID">
            <Button
              type="text"
              size="small"
              icon={<CopyOutlined />}
              onClick={() => handleCopyId(id)}
            />
          </Tooltip>
        </Space>
      ),
    },
    {
      title: '閭鐘舵€?,
      dataIndex: 'email',
      key: 'email',
      width: 150,
      render: (email: string, record: User) => {
        if (!email) {
          return <Tag color="gray">鏈粦瀹?/Tag>;
        }
        return record.email_verified ? (
          <Tag color="green" icon={<CheckCircleOutlined />}>宸查獙璇?/Tag>
        ) : (
          <Tag color="orange" icon={<CloseCircleOutlined />}>鏈獙璇?/Tag>
        );
      },
    },
    {
      title: '褰撳墠绉垎',
      dataIndex: 'credits',
      key: 'credits',
      width: 120,
      render: (credits: number) => (
        <Tag color={credits > 0 ? 'green' : 'red'}>
          {credits}
        </Tag>
      ),
      sorter: (a, b) => a.credits - b.credits,
    },
    {
      title: '绱璐拱',
      dataIndex: 'total_credits_purchased',
      key: 'total_credits_purchased',
      width: 120,
      render: (total: number) => (
        <Text type="success">{total}</Text>
      ),
    },
    {
      title: '绱娑堣垂',
      dataIndex: 'total_credits_consumed',
      key: 'total_credits_consumed',
      width: 120,
      render: (total: number) => (
        <Text type="warning">{total}</Text>
      ),
    },
    {
      title: '娉ㄥ唽鏃堕棿',
      dataIndex: 'created_at',
      key: 'created_at',
      width: 180,
      render: (date: string) => new Date(date).toLocaleString('zh-CN'),
      sorter: (a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime(),
    },
    {
      title: '鏈€鍚庢椿璺?,
      dataIndex: 'last_active_at',
      key: 'last_active_at',
      width: 180,
      render: (date: string) => new Date(date).toLocaleString('zh-CN'),
    },
    {
      title: '鎿嶄綔',
      key: 'actions',
      width: 240,
      fixed: 'right',
      render: (_, record) => (
        <Space size="small">
          <Tooltip title="鏌ョ湅璇︽儏">
            <Button
              type="text"
              size="small"
              icon={<EyeOutlined />}
              onClick={() => handleViewUser(record)}
            />
          </Tooltip>
          <Tooltip title="璋冩暣绉垎">
            <Button
              type="text"
              size="small"
              icon={<EditOutlined />}
              onClick={() => handleAdjustCredits(record)}
            />
          </Tooltip>
          {(!record.email || !record.email_verified) && (
            <Tooltip title="閭楠岃瘉">
              <Button
                type="text"
                size="small"
                icon={<MailOutlined />}
                onClick={() => handleEmailVerification(record)}
              />
            </Tooltip>
          )}
          <Popconfirm
            title="纭畾鍒犻櫎姝ょ敤鎴峰悧锛?
            description="鍒犻櫎鍚庡皢鏃犳硶鎭㈠锛屽寘鎷墍鏈夌浉鍏虫暟鎹?
            onConfirm={() => handleDeleteUser(record)}
            okText="纭畾"
            cancelText="鍙栨秷"
          >
            <Tooltip title="鍒犻櫎鐢ㄦ埛">
              <Button
                type="text"
                size="small"
                danger
                icon={<DeleteOutlined />}
              />
            </Tooltip>
          </Popconfirm>
        </Space>
      ),
    },
  ];

  return (
    <AdminLayout>
      <div style={{ marginBottom: 24 }}>
        <Row justify="space-between" align="middle">
          <Col>
            <Title level={2} style={{ margin: 0 }}>
              鐢ㄦ埛绠＄悊
            </Title>
            <Text type="secondary">
              绠＄悊鎵€鏈夋敞鍐岀敤鎴峰拰绉垎
            </Text>
          </Col>
          <Col>
            <Space>
              <Button
                icon={<ExportOutlined />}
                onClick={handleExport}
              >
                瀵煎嚭鏁版嵁
              </Button>
              <Button
                type="primary"
                icon={<ReloadOutlined />}
                onClick={loadUsers}
                loading={loading}
              >
                鍒锋柊
              </Button>
            </Space>
          </Col>
        </Row>
      </div>

      {/* 缁熻鍗＄墖 */}
      <Row gutter={16} style={{ marginBottom: 24 }}>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="鎬荤敤鎴锋暟"
              value={total}
              prefix={<UserOutlined />}
            />
          </Card>
        </Col>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="娲昏穬鐢ㄦ埛"
              value={users.filter(u => new Date(u.last_active_at) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)).length}
              suffix={`/ ${total}`}
            />
          </Card>
        </Col>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="宸查獙璇侀偖绠?
              value={users.filter(u => u.email_verified).length}
              suffix={`/ ${users.filter(u => u.email).length}`}
            />
          </Card>
        </Col>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="鎬荤Н鍒嗕綑棰?
              value={users.reduce((sum, user) => sum + user.credits, 0)}
            />
          </Card>
        </Col>
      </Row>

      {/* 绛涢€夊尯鍩?*/}
      <Card style={{ marginBottom: 24 }}>
        <Row gutter={[16, 16]}>
          <Col xs={24} sm={8}>
            <Search
              placeholder="鎼滅储鐢ㄦ埛ID"
              allowClear
              onSearch={(value) => setFilters(prev => ({ ...prev, installation_id: value }))}
            />
          </Col>
          <Col xs={24} sm={6}>
            <Select
              placeholder="閭鐘舵€?
              allowClear
              style={{ width: '100%' }}
              onChange={(value) => setFilters(prev => ({ ...prev, email_status: value }))}
            >
              <Option value="verified">宸查獙璇?/Option>
              <Option value="unverified">鏈獙璇?/Option>
              <Option value="none">鏈粦瀹?/Option>
            </Select>
          </Col>
          <Col xs={24} sm={6}>
            <InputNumber
              placeholder="鏈€浣庣Н鍒?
              style={{ width: '100%' }}
              min={0}
              onChange={(value) => setFilters(prev => ({ ...prev, min_credits: value || undefined }))}
            />
          </Col>
          <Col xs={24} sm={4}>
            <Select
              placeholder="娉ㄥ唽鏃堕棿"
              allowClear
              style={{ width: '100%' }}
              onChange={(value) => setFilters(prev => ({ ...prev, date_range: value }))}
            >
              <Option value="today">浠婂ぉ</Option>
              <Option value="week">鏈€杩戜竴鍛?/Option>
              <Option value="month">鏈€杩戜竴鏈?/Option>
            </Select>
          </Col>
        </Row>
      </Card>

      {/* 鐢ㄦ埛琛ㄦ牸 */}
      <Card>
        <Table
          columns={columns}
          dataSource={users}
          rowKey="installation_id"
          loading={loading}
          scroll={{ x: 1400 }}
          pagination={{
            current: currentPage,
            pageSize: pageSize,
            total: total,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) => `绗?${range[0]}-${range[1]} 鏉★紝鍏?${total} 鏉,
            onChange: (page, size) => {
              setCurrentPage(page);
              setPageSize(size);
            },
          }}
        />
      </Card>

      {/* 鐢ㄦ埛璇︽儏妯℃€佹 */}
      <Modal
        title="鐢ㄦ埛璇︽儏"
        open={userDetailVisible}
        onCancel={() => setUserDetailVisible(false)}
        footer={null}
        width={800}
      >
        {selectedUser && (
          <Descriptions bordered column={2}>
            <Descriptions.Item label="鐢ㄦ埛ID" span={2}>
              <Text code>{selectedUser.installation_id}</Text>
              <Button
                type="text"
                size="small"
                icon={<CopyOutlined />}
                onClick={() => handleCopyId(selectedUser.installation_id)}
              />
            </Descriptions.Item>
            <Descriptions.Item label="閭鍦板潃">
              {selectedUser.email || '鏈粦瀹?}
            </Descriptions.Item>
            <Descriptions.Item label="閭鐘舵€?>
              {selectedUser.email ? (
                selectedUser.email_verified ? (
                  <Tag color="green">宸查獙璇?/Tag>
                ) : (
                  <Tag color="orange">鏈獙璇?/Tag>
                )
              ) : (
                <Tag color="gray">鏈粦瀹?/Tag>
              )}
            </Descriptions.Item>
            <Descriptions.Item label="褰撳墠绉垎">
              <Text strong style={{ color: selectedUser.credits > 0 ? '#52c41a' : '#ff4d4f' }}>
                {selectedUser.credits}
              </Text>
            </Descriptions.Item>
            <Descriptions.Item label="绱璐拱">
              <Text type="success">{selectedUser.total_credits_purchased}</Text>
            </Descriptions.Item>
            <Descriptions.Item label="绱娑堣垂">
              <Text type="warning">{selectedUser.total_credits_consumed}</Text>
            </Descriptions.Item>
            <Descriptions.Item label="娉ㄥ唽鏃堕棿">
              {new Date(selectedUser.created_at).toLocaleString('zh-CN')}
            </Descriptions.Item>
            <Descriptions.Item label="鏈€鍚庢椿璺?>
              {new Date(selectedUser.last_active_at).toLocaleString('zh-CN')}
            </Descriptions.Item>
            <Descriptions.Item label="楠岃瘉鏃堕棿">
              {selectedUser.email_verified_at ?
                new Date(selectedUser.email_verified_at).toLocaleString('zh-CN') :
                '鏈獙璇?
              }
            </Descriptions.Item>
          </Descriptions>
        )}

        {/* 鏈€杩戜氦鏄撹褰?*/}
        {selectedUser?.recent_transactions && selectedUser.recent_transactions.length > 0 && (
          <div style={{ marginTop: 24 }}>
            <Title level={5}>鏈€杩戜氦鏄撹褰?/Title>
            <Table
              size="small"
              dataSource={selectedUser.recent_transactions}
              columns={[
                {
                  title: '绫诲瀷',
                  dataIndex: 'type',
                  key: 'type',
                  render: (type: string) => {
                    const typeMap: Record<string, { label: string; color: string }> = {
                      purchase: { label: '璐拱', color: 'green' },
                      consume: { label: '娑堣垂', color: 'orange' },
                      adjust: { label: '璋冩暣', color: 'blue' },
                      redeem: { label: '鍏戞崲', color: 'purple' },
                    };
                    const config = typeMap[type] || { label: type, color: 'default' };
                    return <Tag color={config.color}>{config.label}</Tag>;
                  },
                },
                {
                  title: '绉垎鍙樺寲',
                  dataIndex: 'credits',
                  key: 'credits',
                  render: (credits: number) => (
                    <Text style={{ color: credits > 0 ? '#52c41a' : '#ff4d4f' }}>
                      {credits > 0 ? '+' : ''}{credits}
                    </Text>
                  ),
                },
                {
                  title: '浣欓',
                  dataIndex: 'balance_after',
                  key: 'balance_after',
                },
                {
                  title: '璇存槑',
                  dataIndex: 'description',
                  key: 'description',
                },
                {
                  title: '鏃堕棿',
                  dataIndex: 'created_at',
                  key: 'created_at',
                  render: (date: string) => new Date(date).toLocaleString('zh-CN'),
                },
              ]}
              pagination={false}
              rowKey={(record, index) => `transaction-${index}-${record.credits}-${record.created_at}`}
            />
          </div>
        )}
      </Modal>

      {/* 璋冩暣绉垎妯℃€佹 */}
      <Modal
        title="璋冩暣鐢ㄦ埛绉垎"
        open={adjustCreditsVisible}
        onCancel={() => setAdjustCreditsVisible(false)}
        footer={null}
      >
        <Form
          form={adjustForm}
          layout="vertical"
          onFinish={handleAdjustSubmit}
        >
          <Form.Item label="鐢ㄦ埛淇℃伅">
            <Card size="small" style={{ background: '#f5f5f5' }}>
              <Text strong>鐢ㄦ埛ID锛?/Text>
              <Text code>{selectedUser?.installation_id}</Text>
              <br />
              <Text strong>褰撳墠绉垎锛?/Text>
              <Text style={{ color: (selectedUser?.credits || 0) > 0 ? '#52c41a' : '#ff4d4f' }}>
                {selectedUser?.credits || 0}
              </Text>
            </Card>
          </Form.Item>

          <Form.Item
            name="credits"
            label="绉垎鍙樺寲"
            rules={[
              { required: true, message: '璇疯緭鍏ョН鍒嗗彉鍖? },
              { type: 'integer', message: '绉垎蹇呴』鏄暣鏁? },
            ]}
            extra="姝ｆ暟涓哄鍔犵Н鍒嗭紝璐熸暟涓烘墸鍑忕Н鍒?
          >
            <InputNumber
              style={{ width: '100%' }}
              placeholder="璇疯緭鍏ョН鍒嗗彉鍖?
              formatter={value => value ? (Number(value) > 0 ? `+${value}` : `${value}`) : ''}
              parser={value => value?.replace(/\+/, '') || ''}
            />
          </Form.Item>

          <Form.Item
            name="reason"
            label="璋冩暣鍘熷洜"
            rules={[{ required: true, message: '璇疯緭鍏ヨ皟鏁村師鍥? }]}
          >
            <Input.TextArea
              placeholder="璇疯缁嗚鏄庣Н鍒嗚皟鏁寸殑鍘熷洜"
              rows={3}
              maxLength={200}
              showCount
            />
          </Form.Item>

          <Form.Item style={{ marginBottom: 0, textAlign: 'right' }}>
            <Space>
              <Button onClick={() => setAdjustCreditsVisible(false)}>
                鍙栨秷
              </Button>
              <Button type="primary" htmlType="submit">
                纭璋冩暣
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>

      {/* 閭楠岃瘉妯℃€佹 */}
      <Modal
        title="鍙戦€侀偖绠遍獙璇?
        open={emailVerificationVisible}
        onCancel={() => setEmailVerificationVisible(false)}
        footer={null}
      >
        <Form
          form={emailForm}
          layout="vertical"
          onFinish={handleEmailVerificationSubmit}
        >
          <Form.Item label="鐢ㄦ埛淇℃伅">
            <Card size="small" style={{ background: '#f5f5f5' }}>
              <Text strong>鐢ㄦ埛ID锛?/Text>
              <Text code>{selectedUser?.installation_id}</Text>
              <br />
              <Text strong>褰撳墠閭鐘舵€侊細</Text>
              {selectedUser?.email ? (
                selectedUser.email_verified ? (
                  <Tag color="green" icon={<CheckCircleOutlined />}>宸查獙璇?/Tag>
                ) : (
                  <Tag color="orange" icon={<CloseCircleOutlined />}>鏈獙璇?/Tag>
                )
              ) : (
                <Tag color="gray">鏈粦瀹?/Tag>
              )}
            </Card>
          </Form.Item>

          <Form.Item
            name="email"
            label="閭鍦板潃"
            rules={[
              { required: true, message: '璇疯緭鍏ラ偖绠卞湴鍧€' },
              { type: 'email', message: '璇疯緭鍏ユ湁鏁堢殑閭鍦板潃' },
            ]}
            initialValue={selectedUser?.email || ''}
          >
            <Input
              placeholder="璇疯緭鍏ヨ楠岃瘉鐨勯偖绠卞湴鍧€"
              prefix={<MailOutlined />}
            />
          </Form.Item>

          <Form.Item style={{ marginBottom: 0, textAlign: 'right' }}>
            <Space>
              <Button onClick={() => setEmailVerificationVisible(false)}>
                鍙栨秷
              </Button>
              <Button type="primary" htmlType="submit" icon={<MailOutlined />}>
                鍙戦€侀獙璇侀偖浠?
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </AdminLayout>
  );
}
